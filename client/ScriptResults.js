// Generated by CoffeeScript 1.12.6
(function() {
  Template.ScriptResults.rendered = function() {
    var container, contents, options, result;
    container = document.getElementById("gremlinResultEditor");
    options = {
      mode: "code",
      modes: ["code", "form", "text", "tree", "view"]
    };
    window.resultsEditor = new JSONEditor(container, options);
    result = Session.get('scriptResult');
    if (result === null) {
      contents = '';
    } else {
      contents = result;
    }
    window.resultsEditor.set(contents);
    window.resultsEditor.$blockScrolling = 2e308;
    $(".script-spawn").click(function() {
      return open('/results?json=' + JSON.stringify(Session.get('scriptResult')) + '&script=' + encodeURIComponent(Session.get('scriptCode')));
    });
    return $(".results2csv").click(function() {
      var csv;
      csv = Papa.unparse(Session.get('scriptResult'));
      return window.open('data:text/csv;charset=utf-8,' + escape(csv));
    });
  };

  Template.ScriptResults.helpers({
    successOrFailure: function() {
      var status;
      status = Session.get('runStatus');
      if (status === true) {
        return 'Succeeded';
      }
      if (status === false) {
        return 'Failed';
      }
      return status;
    },
    queryTime: function() {
      var t;
      t = Session.get('queryTime');
      if (t === 'N/A') {
        return t;
      } else {
        return t + ' ms';
      }
    },
    elapsedTime: function() {
      var t;
      t = Session.get('elapsedTime');
      if (t === 'N/A') {
        return t;
      } else {
        return t + ' ms';
      }
    },
    graphSelected: function() {
      return (Session.get('graphName')) !== null;
    },
    scriptSelected: function() {
      return (Session.get('scriptName')) !== null;
    },
    scriptResult: function() {
      return (Session.get('scriptResult')) !== null;
    },
    elementsInResults: function() {
      var obj, resp;
      obj = Session.get('elementsInResults');
      resp = '';
      if (obj.vertices.length > 0) {
        resp = resp + obj.vertices.length + ' vertices';
        if (obj.edges.length > 0) {
          resp = resp + ' and ';
        }
      }
      if (obj.edges.length > 0) {
        resp = (resp + obj.edges.length) + ' edges';
      }
      return resp + ' were found in these results';
    },
    elementsFoundInResults: function() {
      var obj;
      obj = Session.get('elementsInResults');
      return (obj.vertices.length + obj.edges.length) > 0;
    }
  });

}).call(this);

//# sourceMappingURL=ScriptResults.js.map
