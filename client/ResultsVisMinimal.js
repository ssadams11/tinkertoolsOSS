// Generated by CoffeeScript 1.12.6
(function() {
  Template.ResultsVisMinimal.rendered = function() {
    var config, container, data, defaultOptions, options, visOptions;
    Session.set('useLabelPrefix', true);
    this.find('.results-vis')._uihooks;
    ({
      removeElement: function(node) {
        return window.visnetwork.destroy();
      }
    });
    container = document.getElementById('mynetwork');
    config = document.getElementById('vis-config');
    $(config).hide();
    visOptions = Session.get('visOptions');
    defaultOptions = {
      interaction: {
        hover: true,
        navigationButtons: true,
        multiselect: true
      },
      physics: true,
      nodes: {
        labelHighlightBold: true,
        font: {
          face: 'arial'
        },
        hidden: false,
        borderWidth: 1,
        color: {
          hover: {
            border: '#ffff00',
            background: '#0066cc'
          },
          highlight: {
            border: '#ff0000',
            background: '#ffff00'
          }
        }
      },
      edges: {
        hidden: false,
        arrows: {
          to: {
            enabled: true,
            scaleFactor: 0.5
          }
        },
        color: {
          highlight: '#ff0000',
          hover: '#0066cc'
        }
      }
    };
    if (visOptions === void 0) {
      options = defaultOptions;
    } else {
      options = visOptions;
    }
    data = [];
    console.log("installing window.visnetwork");
    window.visnetwork = new vis.Network(container, data, options);
    window.visnetwork.on('selectEdge', function(params) {
      return console.log(params);
    });
    window.visnetwork.on('selectNode', function(params) {
      return console.log(params);
    });
    window.visnetwork.on('doubleClick', function(params) {
      var div, element, html, title;
      if (params.nodes.length !== 0) {
        element = window.visnetwork.nodesHandler.body.data.nodes.get(params.nodes[0]);
        html = popupDialogForElement(element.element);
        if ((Session.get('tinkerPopVersion')) === '3') {
          title = 'Vertex: ' + element.element.id;
        } else {
          title = 'Vertex: ' + element.element._id;
        }
      } else {
        if (params.edges.length === 1) {
          element = window.visnetwork.edgesHandler.body.data.edges.get(params.edges[0]);
          html = popupDialogForElement(element.element);
          title = 'Edge: ' + element.element._id;
        } else {
          return;
        }
      }
      div = document.createElement('div');
      div["class"] = 'doubleClick-dialog';
      div.innerHTML = html;
      $(".vis-network").append(div);
      return $(div).dialog({
        title: title,
        resizable: true
      });
    });
    $(".results-graph-fit").click(function() {
      return window.visnetwork.fit();
    });
    $(".vis-options-node-hideShow").prop('checked', true);
    $(".vis-options-node-hideShow").change(function() {
      var newState, oldState;
      oldState = $(".vis-options-node-hideShow").prop('checked');
      newState = !oldState;
      return window.visnetwork.setOptions({
        nodes: {
          hidden: newState
        }
      });
    });
    $(".vis-options-edge-hideShow").prop('checked', true);
    $(".vis-options-edge-hideShow").change(function() {
      var newState, oldState;
      oldState = $(".vis-options-edge-hideShow").prop('checked');
      newState = !oldState;
      return window.visnetwork.setOptions({
        edges: {
          hidden: newState
        }
      });
    });
    $(".vis-options-physics-toggle").prop('checked', true);
    $(".vis-options-physics-toggle").change(function() {
      var state;
      state = $(".vis-options-physics-toggle").prop('checked');
      return window.visnetwork.setOptions({
        physics: state
      });
    });
    $('.all-settings').click(function(evt) {
      return $('#vis-config').dialog({
        title: 'Visualization Options',
        resizable: true,
        width: 500,
        height: 300
      });
    });
    return $("#nodeLabelProperty").change(function() {
      var key, nodes;
      key = $("#nodeLabelProperty").val();
      Session.set('keyForNodeLabel', key);
      nodes = window.visnetwork.nodesHandler.body.data.nodes;
      window.visnetwork.stopSimulation();
      nodes.forEach(function(node) {
        node.label = labelForVertex(node.element, key);
        return nodes.update(node);
      });
      return window.visnetwork.startSimulation();
    });
  };

  Template.ResultsVisMinimal.helpers({
    vertexPropertyNames: function() {
      return Session.get('vertexPropertyNames');
    },
    vertexPropertyName: function() {
      return this;
    }
  });

}).call(this);

//# sourceMappingURL=ResultsVisMinimal.js.map
