// Generated by CoffeeScript 1.12.6
(function() {
  var discoverTinkerPopVersionAt;

  Template.LoginAndServerAndGraphSelectors.rendered = function() {
    $("#serverSelector").change(function() {
      var serverURL;
      serverURL = $("#serverSelector").val();
      Session.set('graphName', 'the default graph');
      Session.set('scriptName', null);
      $("#scriptSelector").val(null);
      if (window.ScriptEditor) {
        window.ScriptEditor.setValue('Select a script from above or add a named script first using the [+Add] button.');
      }
      Session.set('scriptResult', null);
      Session.set('graphNames', []);
      Session.set('serverURL', serverURL);
      Session.set('tinkerPopVersion', '3');
      Session.set('runStatus', 'Nothing run');
      Session.set('queryTime', 'N/A');
      Session.set('elapsedTime', 'N/A');
      Session.set('keyForNodeLabel', "null");
      Session.set("usingWebSockets", true);
      try {
        return window.wsConnect(serverURL);
      } catch (error) {
        Session.set("usingWebSockets", false);
        return document.getElementById('ws-status').innerHTML = "<p style='font-size:16px; background-color: white; color: black;'>Connected via HTTP</p>";
      }
    });
    window.startRead = function(evt) {
      var element;
      element = document.getElementById("fileName");
      if (element) {
        if (element.files[0].size > 10000000) {
          return getAsTextPreview(element.files[0]);
        } else {
          return getAsText(element.files[0]);
        }
      }
      element = document.getElementById("files");
      if (element) {
        if (element.files[0].size > 10000000) {
          return getAsTextPreview(element.files[0]);
        } else {
          return getAsText(element.files[0]);
        }
      }
    };
    window.getAsTextPreview = function(readFile) {
      var reader;
      reader = new FileReader;
      reader.readAsText(readFile.slice(0, 10000000), "UTF-8");
      return reader.onload = fileLoaded;
    };
    window.getAsText = function(readFile) {
      var reader;
      reader = new FileReader;
      reader.readAsText(readFile, "UTF-8");
      return reader.onload = fileLoaded;
    };
    window.fileLoaded = function(evt) {
      return $('#fileContents').val(evt.target.result);
    };
    return window.BluemixGraphService = 'Bluemix Graph Service';
  };

  Template.LoginAndServerAndGraphSelectors.helpers({
    serverSelected: function() {
      return (Session.get('serverURL')) !== null;
    },
    serverURLs: function() {
      var all, allExamples, allForUserID, each, exampleServerURLs, nodups, userID;
      userID = Session.get('userID');
      allForUserID = Scripts.find({
        userID: userID
      }).fetch();
      all = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = allForUserID.length; j < len; j++) {
          each = allForUserID[j];
          results.push(each.serverURL);
        }
        return results;
      })();
      if (userID) {
        if ((Session.get('userID')) !== (Session.get('examples-userID'))) {
          allExamples = Scripts.find({
            userID: Session.get('examples-userID')
          }).fetch();
          exampleServerURLs = (function() {
            var j, len, results;
            results = [];
            for (j = 0, len = allExamples.length; j < len; j++) {
              each = allExamples[j];
              results.push(each.serverURL);
            }
            return results;
          })();
          all = exampleServerURLs.concat(all);
        }
        nodups = all.filter(function(v, i, a) {
          return a.indexOf(v) === i;
        });
        if (nodups.length === 0) {
          return [];
        }
        return nodups;
      }
    },
    serverURL: function() {
      return this;
    },
    graphNames: function() {
      var serverURL;
      serverURL = Session.get('serverURL');
      if (serverURL) {
        Session.set('graphNames', ['the default graph']);
      }
      return Session.get('graphNames');
    },
    graphName: function() {
      return this;
    },
    graphSelected: function() {
      return (Session.get('graphName')) !== null;
    },
    isAdmin: function() {
      return (Session.get('userID')) === (Session.get('admin-userID'));
    },
    notAdmin: function() {
      return (Session.get('userID')) !== (Session.get('admin-userID'));
    },
    userLoggedIn: function() {
      return (Session.get('userID')) !== null;
    }
  });

  discoverTinkerPopVersionAt = function(url, callback) {
    return Meteor.call('discoverTinkerPopVersionAt', url, function(err, res) {
      return callback(res);
    });
  };

}).call(this);

//# sourceMappingURL=LoginAndServerAndGraphSelectors.js.map
