// Generated by CoffeeScript 1.12.6
(function() {
  Template.TopRow.rendered = function() {
    $(".goto-github").click(function() {
      return open(Session.get('githubURL'));
    });
    $(".goto-github-issues").click(function() {
      return open(Session.get('githubIssuesURL'));
    });
    $(".goto-help").click(function() {
      return open('/help');
    });
    $(".goto-demo-video").click(function() {
      return open('/demo-video');
    });
    $(".user-file-export").click(function() {
      var blob, data, each, i, j, len, len1, objs;
      objs = Scripts.find({
        userID: Session.get('userID')
      }).fetch();
      for (i = 0, len = objs.length; i < len; i++) {
        each = objs[i];
        delete each._id;
      }
      for (j = 0, len1 = objs.length; j < len1; j++) {
        each = objs[j];
        delete each.scriptResult;
      }
      data = [JSON.stringify(objs, null, 4)];
      blob = new Blob(data, {
        type: "application/json;charset=utf-8"
      });
      return saveAs(blob, 'all-gremlin-scripts-for-' + Session.get('userID') + '.json');
    });
    return $(".user-file-import").click(function() {
      return bootbox.dialog({
        title: "Select a script file to be uploaded",
        message: '<input type="file" id="fileName" onchange="startRead()"/>Preview:<textarea id="fileContents" />',
        buttons: {
          success: {
            label: "Import",
            className: "btn-success",
            callback: function() {
              var e, each, i, j, len, len1, objs, results;
              try {
                objs = JSON.parse($('#fileContents').val());
              } catch (error) {
                e = error;
                alert('Syntax error in upload file - Expecting JSON');
                return;
              }
              for (i = 0, len = objs.length; i < len; i++) {
                each = objs[i];
                each.userID = Session.get('userID');
              }
              results = [];
              for (j = 0, len1 = objs.length; j < len1; j++) {
                each = objs[j];
                results.push(Scripts.insert(each));
              }
              return results;
            }
          }
        }
      });
    });
  };

  Template.TopRow.helpers({
    isUserLoggedIn: function() {
      return (Session.get('userID')) !== null;
    }
  });

}).call(this);

//# sourceMappingURL=TopRow.js.map
