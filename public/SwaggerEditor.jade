doctype
html
    head
        title Swagger Visual Editor
        link(rel='stylesheet', href='/bootstrap/css/bootstrap.min.css')
        link(rel='stylesheet', href='/bootstrap/css/bootstrap-responsive.min.css')
        script(src='/bootstrap/js/bootstrap.min.js')
        script(src="/swagger-visual-editor.min.js")
        script.
            var schemaConvUrl = !{JSON.stringify(jsonToSchemaUrl)};
            function jsonToSchema(jsonText, callback) {
                var xmlHttp = new XMLHttpRequest();
                xmlHttp.open("POST", schemaConvUrl + "/json");
                xmlHttp.setRequestHeader("Content-Type", "application/json");
                // open() is async to get around the "Synchronous XMLHttpRequest on the main thread is deprecated" warning
                xmlHttp.onreadystatechange = function () {
                    if (xmlHttp.readyState == 4) { // 4=DONE
                        if (xmlHttp.status == 200) {
                            callback(null, xmlHttp.responseText);
                        }
                        else {
                            callback(xmlHttp.status, null);
                        }
                    }
                };
                xmlHttp.send(jsonText);
            }
            function schemaToJson(schemaText, callback) {
                var xmlHttp = new XMLHttpRequest();
                xmlHttp.open("POST", schemaConvUrl + "/schema");
                xmlHttp.setRequestHeader("Content-Type", "application/json");
                // open() is async to get around the "Synchronous XMLHttpRequest on the main thread is deprecated" warning
                xmlHttp.onreadystatechange = function () {
                    if (xmlHttp.readyState == 4) { // 4=DONE
                        if (xmlHttp.status == 200) {
                            callback(null, xmlHttp.responseText);
                        }
                        else {
                            callback(xmlHttp.status, null);
                        }
                    }
                };
                xmlHttp.send(schemaText);
            }
            function getResult() {
                resultHtmlElement = document.getElementById("resultSwaggerJson");
                resultHtmlElement.value = JSON.stringify(getSwaggerJson());
                return true;
            }
    body
        div(class="container")
            form(class="form-horizontal", role="form", method="post", enctype="multipart/form-data", action="/swagger",  onsubmit="return getResult();")
                input(type="hidden", name="resultSwaggerJson", id="resultSwaggerJson", value="")
                label Show the edited raw Swagger 2.0 JSON:
                button(class="btn btn-primary", type="submit") JSON
            hr(style="height:4px; background-color:black")
            div
                script.
                    var swaggerJson = {"swaggerVersion": "1.2", "basePath": "http://localhost:8000/greetings", "apis": [{"path": "/hello/{subject}","operations": [{"method": "GET","summary": "Greet our subject with hello!","type": "string","nickname": "helloSubject","parameters": [{"name": "subject","description": "The subject to be greeted.","required": true,"type": "string","paramType": "path"}]}]}],"models": {}};
                    var swaggerJsonString = JSON.stringify(swaggerJson);
                    runEditor(swaggerJsonString, jsonToSchema, schemaToJson);